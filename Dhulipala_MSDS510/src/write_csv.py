import sys
import csv

# Method to make python friendly user names once extracted
def python_friendly_name(name):
    return name.lower().replace(' ', '_').replace('/', '_').replace('?', '')

# A list to store all the dictionaries
newlst =[]

# A list to store all the python friendly names
python_friendly_names = []

# A method to take the path for the input and the output file
# Dict Reader Object was generated and iterated to get all the rows
# We can operate on the DictReader object and extract the fieldnames
# The file default is opened in the read mode
def main(input_csv, output_csv):
    with open(input_csv) as f:
        csv_reader = csv.DictReader(f)
        records = [record for record in csv_reader]
        fieldnames = csv_reader.fieldnames
# Code to add the python friendly names to the list of python_friendly_names
        for name in fieldnames:

            python_friendly_names.append(python_friendly_name(name))
# A dictionary comprehension that iterates through the ordered dict generated by iterating the csv_reader
# Each dictionary is added as alist item in the new_list
    for record in records:
        newlst.append({python_friendly_name(name): value for name, value in record.items()} )


# The following code opens the output file in the write mode
# When Dict writer was used we need to specify the field names

    with open(output_csv, 'w') as f:
        csv_writer = csv.DictWriter(f, fieldnames=python_friendly_names)
        csv_writer.writeheader()
        csv_writer.writerows(newlst)


# The following code checks the if the relevant number of arguements were specified in the commandline

if __name__ == '__main__':
    args = sys.argv
    if len(args) < 3:
        print('usage: write_csv <input_csv> <output_csv>')
    else:
        main(args[1], args[2])

